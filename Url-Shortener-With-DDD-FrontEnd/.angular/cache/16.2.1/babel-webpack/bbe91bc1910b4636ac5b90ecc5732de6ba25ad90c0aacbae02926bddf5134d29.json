{"ast":null,"code":"var _class;\nimport { NG_VALIDATORS } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nexport class UrlValidatorDirective {\n  validate(control) {\n    if (!control.value) {\n      return null; // Return null if the input is empty\n    }\n    // Regular expression to match a valid URL pattern\n    const urlPattern = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n    if (!urlPattern.test(control.value)) {\n      return {\n        invalidUrl: true\n      }; // Validation failed\n    }\n\n    return null; // Validation passed\n  }\n}\n_class = UrlValidatorDirective;\n_class.ɵfac = function UrlValidatorDirective_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"appUrlValidator\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALIDATORS,\n    useExisting: _class,\n    multi: true\n  }])]\n});","map":{"version":3,"names":["NG_VALIDATORS","UrlValidatorDirective","validate","control","value","urlPattern","test","invalidUrl","selectors","features","i0","ɵɵProvidersFeature","provide","useExisting","multi"],"sources":["/Users/henrick993/WebstormProjects/Url-Shortener-With-DDD-FrontEnd/src/app/directives/url-validator.directive.ts"],"sourcesContent":["import { Directive } from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator} from \"@angular/forms\";\n\n@Directive({\n  selector: '[appUrlValidator]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: UrlValidatorDirective, multi: true }]\n\n})\nexport class UrlValidatorDirective implements Validator {\n  validate(control: AbstractControl): ValidationErrors | null {\n    if (!control.value) {\n      return null; // Return null if the input is empty\n    }\n\n    // Regular expression to match a valid URL pattern\n    const urlPattern = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n\n    if (!urlPattern.test(control.value)) {\n      return { invalidUrl: true }; // Validation failed\n    }\n\n    return null; // Validation passed\n  }\n}\n"],"mappings":";AACA,SAAyBA,aAAa,QAAoC,gBAAgB;;AAO1F,OAAM,MAAOC,qBAAqB;EAChCC,QAAQA,CAACC,OAAwB;IAC/B,IAAI,CAACA,OAAO,CAACC,KAAK,EAAE;MAClB,OAAO,IAAI,CAAC,CAAC;;IAGf;IACA,MAAMC,UAAU,GAAG,yaAAya;IAE5b,IAAI,CAACA,UAAU,CAACC,IAAI,CAACH,OAAO,CAACC,KAAK,CAAC,EAAE;MACnC,OAAO;QAAEG,UAAU,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAG/B,OAAO,IAAI,CAAC,CAAC;EACf;;SAdWN,qBAAqB;;mBAArBA,MAAqB;AAAA;;QAArBA,MAAqB;EAAAO,SAAA;EAAAC,QAAA,GAAAC,EAAA,CAAAC,kBAAA,CAHrB,CAAC;IAAEC,OAAO,EAAEZ,aAAa;IAAEa,WAAW,EAAEZ,MAAqB;IAAEa,KAAK,EAAE;EAAI,CAAE,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}